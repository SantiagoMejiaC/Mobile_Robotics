from visualization_msgs.msg import Marker

from visualization_msgs.msg import MarkerArray

import numpy as np

import rclpy

from rclpy.node import Node

from nav_msgs.msg import Odometry

from geometry_msgs.msg import Point


class MarkerPublisher(Node):

    def __init__(self):

        super().__init__('marker_publisher')

        self.publisher = self.create_publisher(MarkerArray, 'marker_array_topic', 10)

        self.marker_array = MarkerArray()

        self.subs_position_robot = self.create_subscription(Odometry, '/odom', self.listener_callback, 10)

        self.subs_coord_nuke = self.create_subscription(Point, '/coordonnee_objet_ref_robot', self.get_objt_coord, 10)

        self.nuke_coord = Point()


    def listener_callback(self, msgs):

        self.odom_data = msgs


    def get_objt_coord(self, msg):

        self.nuke_coord = msg


    def transform_coordinates(self):

        x_r, y_r, theta_r = self.position_robot()

        x_obj, y_obj = self.nuke_coord.x, self.nuke_coord.y

        transformation_matrix = np.array([

                                            [np.cos(theta_r), -np.sin(theta_r), x_r],

                                            [np.sin(theta_r), np.cos(theta_r), y_r],

                                            [0, 0, 1]

                                        ])

        object_homogeneous = np.array([x_obj, y_obj, 1])

        transformed_coordinates = np.dot(transformation_matrix, object_homogeneous)[:2]

        return transformed_coordinates


    def position_robot(self):

        position = self.odom_data.pose.pose.position

        orientation = self.odom_data.pose.pose.orientation

        return (position.x, position.y, orientation.z)


    def add_marker(self):

        marker = Marker()

        marker.header.frame_id = "base_link"

        x, y = self.transform_coordinates()

        marker.pose.position.x, marker.pose.position.y = x, y

        self.marker_array.markers.append(marker)


    def publish_markers(self):

        self.publisher.publish(self.marker_array)


def main(args=None):

